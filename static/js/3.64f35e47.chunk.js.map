{"version":3,"sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPost/MyPosts.module.css","components/Profile/MyPost/Post/Post.module.css","components/Profile/ProfileInfo/ProfileStatusWithHooks.jsx","components/Profile/ProfileInfo/ProfileDataForm.jsx","components/Profile/ProfileInfo/ProfileInfo.jsx","components/Profile/MyPost/Post/Post.jsx","components/Profile/MyPost/MyPosts.jsx","components/Profile/MyPost/MyPostsContainer.jsx","components/Profile/Profile.jsx","components/Profile/ProfileContainer.jsx"],"names":["module","exports","ProfileStatusWithHooks","props","useState","editMode","setEditMode","status","setStatus","useEffect","className","style","onDoubleClick","onChange","event","currentTarget","value","autoFocus","onBlur","updateStatus","maxLength20","maxLengthCreator","Input","Element","Textarea","ProfileDataFormReduxForm","reduxForm","form","handleSubmit","profile","error","onSubmit","styles","formSummaryError","Field","placeholder","name","component","validate","requiredField","type","Object","keys","contacts","map","key","contact","toLocaleLowerCase","ProfileData","isOwner","goToEditMode","onClick","descriptionBlock","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","contactTitle","contactValue","Contact","ProfileInfo","Preloader","src","photos","large","userPhoto","e","target","files","length","savePhoto","initialValues","formData","saveProfile","then","Post","item","message","likeCount","MyPosts","React","memo","postsElement","posts","reverse","post","id","postBlock","AddPostFormRedux","values","addPost","newPostText","maxLength10","MyPostsContainer","connect","state","profilePage","dispatch","addPostActionCreator","Profile","updateUserStatus","ProfileContainer","userId","this","match","params","authorizedUserId","history","push","getUserProfile","getUserStatus","refreshProfile","prevProps","prevState","snapshot","Component","compose","auth","isAuth","withRouter"],"mappings":"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","file":"static/js/3.64f35e47.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__1W9tF\",\"userPhoto\":\"ProfileInfo_userPhoto__2OiOg\",\"contact\":\"ProfileInfo_contact__1woVC\",\"status\":\"ProfileInfo_status__vvuzi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postBlock\":\"MyPosts_postBlock__1vwYL\",\"posts\":\"MyPosts_posts__YK5Ip\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__3YJ9O\"};","import React, {useEffect, useState} from 'react';\r\nimport style from './ProfileInfo.module.css';\r\n\r\nconst ProfileStatusWithHooks = (props) => {\r\n    //hook local state\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [status, setStatus] = useState(props.status);\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status);\r\n    }, [props.status]);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n    };\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false);\r\n        props.updateStatus(status);\r\n    };\r\n\r\n    const onStatusChange = (event) => {\r\n        setStatus(event.currentTarget.value);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            {!editMode &&\r\n            <div className={style.status}>\r\n                <b>Status:</b><span onDoubleClick={activateEditMode}> {props.status || '---------'}</span>\r\n            </div>\r\n            }\r\n\r\n            {editMode &&\r\n            <div>\r\n                <input onChange={onStatusChange} autoFocus={true}\r\n                       onBlur={deactivateEditMode}\r\n                       value={status}/>\r\n            </div>\r\n            }\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ProfileStatusWithHooks;","import React from 'react';\r\nimport {Field, reduxForm} from 'redux-form';\r\nimport {maxLengthCreator, requiredField} from '../../../utils/validators/validators';\r\nimport {Element} from '../../common/FormsControls/FormsControls';\r\nimport style from './ProfileInfo.module.css';\r\nimport styles from '../../common/FormsControls/FormsControls.module.css';\r\n\r\nconst maxLength20 = maxLengthCreator(20);\r\nconst Input = Element('input');\r\nconst Textarea = Element('textarea');\r\n\r\n\r\nconst ProfileDataForm = ({handleSubmit, profile, error}) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <button>Save</button>\r\n\r\n            {error && <div className={styles.formSummaryError}>\r\n                {error}\r\n            </div>\r\n            }\r\n\r\n            <div>\r\n                <b>Full name:</b>\r\n                <Field placeholder='Full name' name='fullName'\r\n                       component={Input} validate={[requiredField, maxLength20]} />\r\n            </div>\r\n            <div>\r\n                <b>Looking for a Job:</b>\r\n                <Field name='lookingForAJob' type='checkbox' component={Input} />\r\n            </div>\r\n            <div>\r\n                <b>My professional skills:</b>\r\n                <Field placeholder='Description of work' name='lookingForAJobDescription'\r\n                       component={Textarea} />\r\n            </div>\r\n            <div>\r\n                <b>About me:</b>\r\n                <Field placeholder='About me' name='aboutMe'\r\n                       component={Textarea} />\r\n            </div>\r\n            <div>\r\n                <b>Contacts:</b> {Object.keys(profile.contacts).map(key => {\r\n                return <div key={key} className={style.contact}>\r\n                    <b>{key}:</b> <Field placeholder={key}\r\n                                         name={'contacts.' + key.toLocaleLowerCase()} component={Input} />\r\n                </div>\r\n            })}\r\n            </div>\r\n        </form>\r\n    )\r\n};\r\n\r\nconst ProfileDataFormReduxForm = reduxForm({form: 'editProfile'})(ProfileDataForm);\r\n\r\nexport default ProfileDataFormReduxForm;\r\n","import React, {useState} from 'react';\r\nimport style from './ProfileInfo.module.css';\r\nimport Preloader from '../../common/Preloader/Preloader';\r\nimport ProfileStatusWithHooks from './ProfileStatusWithHooks';\r\nimport userPhoto from '../../../assets/images/User.png';\r\nimport ProfileDataForm from './ProfileDataForm';\r\n\r\nconst ProfileInfo = (props) => {\r\n\r\n    let [editMode, setEditMode] = useState(false);\r\n\r\n    if (!props.profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    const onMainPhotoSelected = (e) => {\r\n        if (e.target.files.length) {\r\n            props.savePhoto(e.target.files[0]);\r\n        }\r\n    };\r\n\r\n    const onSubmit = (formData) => {\r\n        props.saveProfile(formData).then(() => {\r\n                setEditMode(false)\r\n            }\r\n        );\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <img src='https://farm66.static.flickr.com/65535/48752283542_2960cf0e67_b.jpg'/>\r\n            </div>\r\n            <div className={style.descriptionBlock}>\r\n\r\n                <img src={props.profile.photos.large || userPhoto} className={style.userPhoto}/>\r\n                {props.isOwner && <input type={'file'} onChange={onMainPhotoSelected}/>}\r\n\r\n                <ProfileStatusWithHooks status={props.status} updateStatus={props.updateStatus}/>\r\n\r\n                {editMode\r\n                    ? <ProfileDataForm initialValues={props.profile} profile={props.profile} onSubmit={onSubmit}/>\r\n                    : <ProfileData profile={props.profile} isOwner={props.isOwner}\r\n                                   goToEditMode={() => {setEditMode(true)}}/>}\r\n\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst ProfileData = ({profile, isOwner, goToEditMode}) => {\r\n\r\n    return (\r\n        <div>\r\n            { isOwner && <button onClick={goToEditMode}>Edit</button> }\r\n            <div className={style.descriptionBlock}>\r\n                <b>Full name:</b> {profile.fullName}\r\n            </div>\r\n            <div className={style.descriptionBlock}>\r\n                <b>Looking for a Job:</b> {profile.lookingForAJob ? 'yes' : 'no'}\r\n            </div>\r\n            {profile.lookingForAJob &&\r\n            <div className={style.descriptionBlock}>\r\n                <b>My professional skills:</b> {profile.lookingForAJobDescription}\r\n            </div>}\r\n            <div className={style.descriptionBlock}>\r\n                <b>About me:</b> {profile.aboutMe}\r\n            </div>\r\n            <div className={style.descriptionBlock}>\r\n                <b>Contacts:</b> {Object.keys(profile.contacts).map(key => {\r\n                return <Contact key={key} contactTitle={key} contactValue={profile.contacts[key]}/>\r\n            })}\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\n\r\nconst Contact = ({contactTitle, contactValue}) => {\r\n\r\n    return (\r\n        <div className={style.contact}>\r\n            <b>{contactTitle}</b>: {contactValue}\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default ProfileInfo;","import React from 'react';\r\nimport style from './Post.module.css';\r\n\r\nconst Post = (props) => {\r\n    return (\r\n\r\n        <div className={style.item}>\r\n            <img src='https://404store.com/2019/09/15/wildlifeclup-20190915-0003.jpg' />\r\n            \r\n            { props.message }\r\n\r\n            <div>\r\n                <span>Like { props.likeCount }</span>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Post;","import React from 'react';\r\nimport style from './MyPosts.module.css';\r\nimport Post from './Post/Post';\r\nimport {Field, reduxForm} from 'redux-form';\r\nimport {maxLengthCreator, requiredField} from \"../../../utils/validators/validators\";\r\nimport {Element} from \"../../common/FormsControls/FormsControls\";\r\n\r\nconst MyPosts = React.memo(props => {\r\n\r\n    let postsElement = [...props.posts]\r\n        .reverse().map(post => <Post key={post.id} message={post.message} likeCount={post.likeCount}/>);\r\n\r\n    let addNewPost = (values) => {\r\n        props.addPost(values.newPostText);\r\n    };\r\n\r\n    return (\r\n        <div className={style.postBlock}>\r\n            <h3>My post</h3>\r\n\r\n            <AddPostFormRedux onSubmit={addNewPost}/>\r\n\r\n            <div className={style.posts}>\r\n                {postsElement}\r\n            </div>\r\n        </div>\r\n    );\r\n});\r\n\r\nconst maxLength10 = maxLengthCreator(10);\r\nconst Textarea = Element(\"textarea\");\r\n\r\nconst AddPostForm = (props) => {\r\n\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={Textarea}\r\n                       name='newPostText'\r\n                       placeholder='Add my post'\r\n                       validate={[requiredField, maxLength10]}/>\r\n            </div>\r\n            <div>\r\n                <button>Add post</button>\r\n            </div>\r\n        </form>\r\n    );\r\n};\r\n\r\nconst AddPostFormRedux = reduxForm ({form: 'profileAddPostForm'})(AddPostForm);\r\n\r\nexport default MyPosts;","import React from 'react';\r\nimport {addPostActionCreator} from \"../../../redux/profile-reducer\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n        newPostText: state.profilePage.newPostText\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n\r\n        addPost: (newPostText) => {\r\n            dispatch(addPostActionCreator(newPostText));\r\n        }\r\n    }\r\n}\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\r\n\r\nexport default MyPostsContainer;","import React from 'react';\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPost/MyPostsContainer\";\r\n\r\nconst Profile = (props) => {\r\n\r\n    return (\r\n        <div>\r\n            <ProfileInfo savePhoto={props.savePhoto}\r\n                         saveProfile={props.saveProfile}\r\n                         isOwner={props.isOwner}\r\n                         profile={props.profile}\r\n                         status={props.status}\r\n                         updateStatus={props.updateUserStatus}/>\r\n            <MyPostsContainer/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Profile;","import React from 'react';\r\nimport Profile from './Profile';\r\nimport {connect} from 'react-redux';\r\nimport {getUserProfile, getUserStatus, savePhoto, saveProfile, updateUserStatus} from '../../redux/profile-reducer';\r\nimport {withRouter} from 'react-router-dom';\r\nimport {compose} from 'redux';\r\n\r\nclass ProfileContainer extends React.Component {\r\n\r\n    refreshProfile () {\r\n        let userId = this.props.match.params.userId;\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId;\r\n            if (!userId) {\r\n                this.props.history.push('/login')\r\n            }\r\n        }\r\n        this.props.getUserProfile(userId);\r\n        this.props.getUserStatus(userId)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile();\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (this.props.match.params.userId != prevProps.match.params.userId) {\r\n            this.refreshProfile();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Profile {...this.props}\r\n                     isOwner={!this.props.match.params.userId}\r\n                     profile={this.props.profile}\r\n                     status={this.props.status}\r\n                     updateUserStatus={this.props.updateUserStatus}\r\n                     savePhoto={this.props.savePhoto}\r\n                     saveProfile={this.props.saveProfile}/>\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state) => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.userId,\r\n    isAuth: state.auth.isAuth\r\n});\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, {getUserProfile, getUserStatus, updateUserStatus, savePhoto, saveProfile}),\r\n    withRouter\r\n)(ProfileContainer);\r\n"],"sourceRoot":""}